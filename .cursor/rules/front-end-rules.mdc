---
description: 
globs: *.tsx, *.json, *.ts, *.css
alwaysApply: false
---

# Review the Project Changelog and Project Directory notes below for our Ecommerce App's React Typescript Front End. This front end interacts with a Spring Boot Back End.

## Project Changelog
# Frontend Project Changelog

## Initial Setup and Core Infrastructure
v1.0
- Initialized React TypeScript project
- Set up project structure and dependencies
- Configured Bootstrap for styling
- Established connection with Spring Boot backend

## Module 1: Product Display and Navigation
v1.1 - Product List Implementation
- Created `ProductList.tsx` component
- Implemented Bootstrap card layout for product display:
  - Product image display
  - Product name and price formatting
  - Responsive grid layout
- Added basic styling and hover effects

v1.2 - Data Fetching and Integration
- Implemented API integration in `ProductList.tsx`:
  - Added axios GET request to `/products` endpoint
  - Created product interface definitions
  - Implemented loading states and error handling
- Set up data fetching on component mount

## Module 2: State Management and Navigation
v1.3 - Global State Implementation
- Established global state management:
  - Created `ProductContext` using React Context API
  - Implemented `selectedProduct` state
  - Added type definitions for context
- Created `ProductPage.tsx` for individual product views
- Implemented navigation between product list and detail views

## Module 3: Shopping Cart Features
v1.4 - Cart UI Implementation
- Added Bootstrap Offcanvas component for cart display
- Created "Add to Cart" button in `ProductPage.tsx`
- Implemented cart slide-out animation
- Added basic cart item display

v1.5 - Checkout Integration
- Implemented Stripe checkout functionality:
  - Created checkout button component
  - Added POST request to `/product/v1/checkout` endpoint
  - Implemented product data formatting for Stripe
  - Added checkout success/failure handling

v1.6 - Cart State Management
- Enhanced cart functionality:
  - Created `CartContext` for global cart state
  - Implemented local storage persistence
  - Added cart update methods
  - Created cart item interface definitions

v1.7 - Product Quantity Management
- Added quantity selection features:
  - Implemented dropdown component for quantity selection
  - Created quantity state management
  - Added quantity validation
  - Updated cart total calculations

v1.8 - Cart UI Enhancements
- Refined cart interface:
  - Moved checkout button to Offcanvas
  - Enhanced cart item display
  - Added cart total calculations
  - Improved mobile responsiveness

## Current Features
- Responsive product grid display
- Individual product detail pages
- Shopping cart with quantity management
- Local storage persistence
- Stripe checkout integration
- Global state management
- Bootstrap styling and animations

## Component Architecture
1. App.tsx (Root component)
   - Global context providers
   - Routing configuration
2. ProductList.tsx
   - Product grid display
   - Data fetching
3. ProductPage.tsx
   - Product details
   - Add to cart functionality
4. CartPage.tsx
   - Cart management
   - Checkout integration

## State Management
- ProductContext: Manages selected product state
- CartContext: Manages shopping cart state
- Local Storage: Persists cart data
- Component-level state: Manages UI interactions

## UI Framework
- Bootstrap components
- Custom styling
- Responsive design
- Offcanvas implementations

## Guidelines
Front End Feature Based Architecture

* app/ - Global state, providers, and config

  * App.js - Main app entry, handles routes

  * routes.js - (Optional) Centralized route definitions

  * store.js - (If using Redux/Zustand) Global state management

  * AppProviders.js - Wrapping app with global providers

  * config.js - Global configuration settings

  * constants.js - Static values (e.g., route names, currency symbols)

  * ThemeProvider.js - Handles global theming (dark/light mode)

  * apiClient.js - Axios or Fetch wrapper for API calls

  * utils.js - Helper functions used across the app

* components/ - Reusable global components

  * Navbar.js - Navigation bar

  * Footer.js - Footer section

  * Button.js - Generic button component

  * Modal.js - Generic modal component

  * Spinner.js - Loading spinner

* features/ - Feature-based modules

  * products/ - Product-related logic

    * components/

      * HomePage.js - Displays all products

      * ProductPage.js - Displays a single product

      * ProductList.js - List of products

    * api/

      * productApi.js - API calls related to products

    * utils/ - (Optional) Helper functions for products

  * cart/ - Shopping cart-related logic

    * components/

      * CartPage.js - Displays items in the cart

      * CartItem.js - Individual cart item component

    * utils/ - (Optional) Cart-related utilities

  * checkout/ - Checkout and payment process

    * components/

      * CheckoutPage.js - Handles checkout process

    * utils/ - (Optional) Checkout-related utilities

* index.js - Entry point of the app, renders App.js

